// Title: Testing the Null Hypotheses of the Regression Functions for France
// Author: Sepideh Mosaferi
// Date: July 2022

new;
library gauss, pgraph;
pqgwin many;

// test statistic 2012: linear
proc ( 1 ) = Test2012_linear(y,x,h);
    local n,arg,ker,theta1,theta0,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    arg = (x*ones(1,n)-ones(n,1)*x')/h; 
    ker = pdfn(arg);   
    theta1 = sumc((x-meanc(x)).*(y-meanc(y)))/sumc((x-meanc(x))^2);
    theta0 = meanc(y)- theta1*meanc(x);
    gxtheta = theta0+theta1*x;  
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);     
    retp(Z_N);
endp;   

// test statistic 2012: quadratic
proc ( 1 ) = Test2012_quadratic(y,x,h);
    local n,arg,ker,Sxx,Sxy,Sxx2,Sx2y,Sx2x2,theta2,theta1,theta0,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    arg = (x*ones(1,n)-ones(n,1)*x')/h; 
    ker = pdfn(arg); 
    Sxx = sumc(x^2)-(sumc(x))^2/n;
    Sxy = sumc(x.*y)-(sumc(x)*sumc(y))/n;
    Sxx2 = sumc(x^3)-(sumc(x)*(sumc(x^2)))/n;
    Sx2y = sumc((x^2).*y)-(sumc(x^2)*sumc(y))/n;
    Sx2x2 = sumc(x^4)-(sumc(x^2))^2/n;
    theta2 = ((Sx2y*Sxx)-(Sxy*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta1 = ((Sxy*Sx2x2)-(Sx2y*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta0 = meanc(y)-theta1*meanc(x)-theta2*(sumc(x^2)/n);    
    gxtheta = theta0+theta1*x+theta2*x^2;  
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);    
    retp(Z_N);
endp; 

// test statistic 2016: linear
proc ( 1 ) = Test2016_linear(y,x,h);
    local n,arg,ker,theta1,theta0,gxtheta,z2,T_N;
    n = rows(y);  
    arg = (x*ones(1,n)-ones(n,1)*x')/h;
    ker = h*gauss(arg/2); 
    theta1 = sumc((x-meanc(x)).*(y-meanc(y)))/sumc((x-meanc(x))^2);
    theta0 = meanc(y)- theta1*meanc(x);
    gxtheta = theta0+theta1*x;   
    z2 = (y-gxtheta)*(y-gxtheta)';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp;   

// test statistic 2016: quadratic
proc ( 1 ) = Test2016_quadratic(y,x,h);
    local n,arg,ker,Sxx,Sxy,Sxx2,Sx2y,Sx2x2,theta2,theta1,theta0,gxtheta,z2,T_N;
    n = rows(y);  
    arg = (x*ones(1,n)-ones(n,1)*x')/h;
    ker = h*gauss(arg/2); 
    Sxx = sumc(x^2)-(sumc(x))^2/n;
    Sxy = sumc(x.*y)-(sumc(x)*sumc(y))/n;
    Sxx2 = sumc(x^3)-(sumc(x)*(sumc(x^2)))/n;
    Sx2y = sumc((x^2).*y)-(sumc(x^2)*sumc(y))/n;
    Sx2x2 = sumc(x^4)-(sumc(x^2))^2/n;
    theta2 = ((Sx2y*Sxx)-(Sxy*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta1 = ((Sxy*Sx2x2)-(Sx2y*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta0 = meanc(y)-theta1*meanc(x)-theta2*(sumc(x^2)/n);
    gxtheta = theta0+theta1*x+theta2*x^2;   
    z2 = (y-gxtheta)*(y-gxtheta)';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp;  

fn gauss(r) = 1/(2*sqrt(pi)).*exp(-r^2);


// read data
load France[59,2]= "/Users/sepidehmosaferi/Desktop/France.txt";
       
// sample size
N = rows(France);
       
@ value of d @  
d_FRAx = 1.093;
d_FRAy = 1.133;
       
@ value of lambda @ 
lambda_FRAx = 0.138;
lambda_FRAy = 0.071;

// subsampling Process
block1 = 0.5*(N^0.5); 
block2 = (N^0.5);
block3 = 2*(N^0.5);
block4 = 4*(N^0.5);
block5 = 6*(N^0.5);

// h_N and h_b's should be based on Cross Validation.
       
h_N = 0.07314563;
d_N = sqrt(N)/(lambda_FRAx^d_FRAx);
tauN = N*h_N/d_N;
       
h_b1 = 0.07314563;
h_b2 = 0.07314563;
h_b3 = 0.07314563;
h_b4 = 0.07314563;
h_b5 = 0.07314563;
       
d_b1 = sqrt(block1)/(lambda_FRAx^d_FRAx);
d_b2 = sqrt(block2)/(lambda_FRAx^d_FRAx);
d_b3 = sqrt(block3)/(lambda_FRAx^d_FRAx);
d_b4 = sqrt(block4)/(lambda_FRAx^d_FRAx);
d_b5 = sqrt(block5)/(lambda_FRAx^d_FRAx);
       
tau_b1 = block1*h_b1/d_b1;
tau_b2 = block2*h_b2/d_b2;
tau_b3 = block3*h_b3/d_b3;
tau_b4 = block4*h_b4/d_b4;
tau_b5 = block5*h_b5/d_b5;
       
// 1.] Linear Hypothesis: Test 2012       
// test 2012: linear test
Test_all = Test2012_linear(France[.,1],France[.,2],h_N);
       
// subDATA for block1
numblock1 = N-block1+1;
subDATA1 = areshape(0,numblock1|block1|2);
j = 1;
do until j > numblock1;
    subDATA1[j,.,.] = France[j:(j+block1-1),.];
    j = j+1;
endo;
       
sub_Test_1 = zeros(numblock1,1);
l = 1;
do until l > numblock1;
    sub_Test_1[l,1] = Test2012_linear(arraytomat(subDATA1[l,.,1]),arraytomat(subDATA1[l,.,2]),h_b1);
    l = l+1;
endo;

// indicator for upper p-value for block1    
Ind_accept_UP1 = zeros(numblock1,1);
z=1;
do until z > numblock1;  
    Ind_accept_UP1[z] = abs(Test_all) <= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP1 = meanc(Ind_accept_UP1); 
      
// indicator for lower p-value for block1  
Ind_accept_LOW1 = zeros(numblock1,1);
z=1;
do until z > numblock1;  
    Ind_accept_LOW1[z] = -abs(Test_all) >= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW1 = meanc(Ind_accept_LOW1); 
      
pvalue_block1 = pvalue_UP1+pvalue_LOW1; // answer 

       
// subDATA for block2
numblock2 = N-block2+1;
subDATA2 = areshape(0,numblock2|block2|2);
j = 1;
do until j > numblock2;
    subDATA2[j,.,.] = France[j:(j+block2-1),.];
    j = j+1;
endo;
       
sub_Test_2 = zeros(numblock2,1);
l = 1;
do until l > numblock2;
    sub_Test_2[l,1] = Test2012_linear(arraytomat(subDATA2[l,.,1]),arraytomat(subDATA2[l,.,2]),h_b2);
    l = l+1;
endo;

// indicator for upper p-value for block2    
Ind_accept_UP2 = zeros(numblock2,1);
z=1;
do until z > numblock2; 
    Ind_accept_UP2[z] = abs(Test_all) <= sub_Test_2[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP2 = meanc(Ind_accept_UP2); 
      
// indicator for lower p-value for block2  
Ind_accept_LOW2 = zeros(numblock2,1);
z=1;
do until z > numblock2;  
    Ind_accept_LOW2[z] = -abs(Test_all) >= sub_Test_2[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW2 = meanc(Ind_accept_LOW2); 
      
pvalue_block2 = pvalue_UP2+pvalue_LOW2; // answer

       
// subDATA for block3
numblock3 = N-block3+1;
subDATA3 = areshape(0,numblock3|block3|2);
j = 1;
do until j > numblock3;
    subDATA3[j,.,.] = France[j:(j+block3-1),.];
    j = j+1;
endo;
       
sub_Test_3 = zeros(numblock3,1);
l = 1;
do until l > numblock3;
    sub_Test_3[l,1] = Test2012_linear(arraytomat(subDATA3[l,.,1]),arraytomat(subDATA3[l,.,2]),h_b3);
    l = l+1;
endo;

// indicator for upper p-value for block3    
Ind_accept_UP3 = zeros(numblock3,1);
z=1;
do until z > numblock3;  
    Ind_accept_UP3[z] = abs(Test_all) <= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP3 = meanc(Ind_accept_UP3); 
      
// indicator for lower p-value for block3  
Ind_accept_LOW3 = zeros(numblock3,1);
z=1;
do until z > numblock3; 
    Ind_accept_LOW3[z] = -abs(Test_all) >= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW3 = meanc(Ind_accept_LOW3); 
      
pvalue_block3 = pvalue_UP3+pvalue_LOW3; // answer 

       
// subDATA for block4
numblock4 = N-block4+1;
subDATA4 = areshape(0,numblock4|block4|2);
j = 1;
do until j > numblock4;
    subDATA4[j,.,.] = France[j:(j+block4-1),.];
    j = j+1;
endo;
       
sub_Test_4 = zeros(numblock4,1);
l = 1;
do until l > numblock4;
    sub_Test_4[l,1] = Test2012_linear(arraytomat(subDATA4[l,.,1]),arraytomat(subDATA4[l,.,2]),h_b4);
    l = l+1;
endo;

// indicator for upper p-value for block4    
Ind_accept_UP4 = zeros(numblock4,1);
z=1;
do until z > numblock4;  
    Ind_accept_UP4[z] = abs(Test_all) <= sub_Test_4[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP4 = meanc(Ind_accept_UP4); 
      
// indicator for lower p-value for block4  
Ind_accept_LOW4 = zeros(numblock4,1);
z=1;
do until z > numblock4;  
    Ind_accept_LOW4[z] = -abs(Test_all) >= sub_Test_4[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW4 = meanc(Ind_accept_LOW4); 
      
pvalue_block4 = pvalue_UP4+pvalue_LOW4; // answer


// subDATA for block5
numblock5 = N-block5+1;
subDATA5 = areshape(0,numblock5|block5|2);
j = 1;
do until j > numblock5;
    subDATA5[j,.,.] = France[j:(j+block5-1),.];
    j = j+1;
endo;
       
sub_Test_5 = zeros(numblock5,1);
l = 1;
do until l > numblock5;
    sub_Test_5[l,1] = Test2012_linear(arraytomat(subDATA5[l,.,1]),arraytomat(subDATA5[l,.,2]),h_b5);
    l = l+1;
endo;

// indicator for upper p-value for block5    
Ind_accept_UP5 = zeros(numblock5,1);
z=1;
do until z > numblock5;  
    Ind_accept_UP5[z] = abs(Test_all) <= sub_Test_5[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP5 = meanc(Ind_accept_UP5); 
      
// indicator for lower p-value for block5  
Ind_accept_LOW5 = zeros(numblock5,1);
z=1;
do until z > numblock5;  
    Ind_accept_LOW5[z] = -abs(Test_all) >= sub_Test_5[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW5 = meanc(Ind_accept_LOW5); 
      
pvalue_block5 = pvalue_UP5+pvalue_LOW5; // answer

       
// -------------------------------------------------------------------------

// 2.] Linear Hypothesis: Test 2016    
// test 2016: linear test
TN_all = Test2016_linear(France[.,1],France[.,2],h_N);
Test_all = (1/tauN) * TN_all; 
       
// subDATA for block1
numblock1 = N-block1+1;
subDATA1 = areshape(0,numblock1|block1|2);
j = 1;
do until j > numblock1;
    subDATA1[j,.,.] = France[j:(j+block1-1),.];
    j = j+1;
endo;
       
sub_TN_1 = zeros(numblock1,1);
l = 1;
do until l > numblock1;
    sub_TN_1[l,1] = Test2016_linear(arraytomat(subDATA1[l,.,1]),arraytomat(subDATA1[l,.,2]),h_b1);
    l = l+1;
endo;

{sub_Test_1} = sub_TN_1 * (1/tau_b1);

// p-value
Ind_accept1 = zeros(1,numblock1);
z=1;
do until z > numblock1; 
    Ind_accept1[z] = Test_all <= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block1 = meanc(Ind_accept1');  // answer 

       
// subDATA for block2
numblock2 = N-block2+1;
subDATA2 = areshape(0,numblock2|block2|2);
j = 1;
do until j > numblock2;
    subDATA2[j,.,.] = France[j:(j+block2-1),.];
    j = j+1;
endo;
       
sub_TN_2 = zeros(numblock2,1);
l = 1;
do until l > numblock2;
    sub_TN_2[l,1] = Test2016_linear(arraytomat(subDATA2[l,.,1]),arraytomat(subDATA2[l,.,2]),h_b2);
    l = l+1;
endo;

{sub_Test_2} = sub_TN_2 * (1/tau_b2);

// p-value
Ind_accept2 = zeros(1,numblock2);
z=1;
do until z > numblock2;  
    Ind_accept2[z] = Test_all <= sub_Test_2[z];  @ acceptance indicator s@
    z = z+1;
endo;
     
pvalue_block2 = meanc(Ind_accept2');  // answer 

       
// subDATA for block3
numblock3 = N-block3+1;
subDATA3 = areshape(0,numblock3|block3|2);
j = 1;
do until j > numblock3;
    subDATA3[j,.,.] = France[j:(j+block3-1),.];
    j = j+1;
endo;
       
sub_TN_3 = zeros(numblock3,1);
l = 1;
do until l > numblock3;
    sub_TN_3[l,1] = Test2016_linear(arraytomat(subDATA3[l,.,1]),arraytomat(subDATA3[l,.,2]),h_b3);
    l = l+1;
endo;

{sub_Test_3} = sub_TN_3 * (1/tau_b3);

// p-value
Ind_accept3 = zeros(1,numblock3);
z=1;
do until z > numblock3;  
    Ind_accept3[z] = Test_all <= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block3 = meanc(Ind_accept3');  // answer 

       
// subDATA for block4
numblock4 = N-block4+1;
subDATA4 = areshape(0,numblock4|block4|2);
j = 1;
do until j > numblock4;
    subDATA4[j,.,.] = France[j:(j+block4-1),.];
    j = j+1;
endo;
       
sub_TN_4 = zeros(numblock4,1);
l = 1;
do until l > numblock4;
    sub_TN_4[l,1] = Test2016_linear(arraytomat(subDATA4[l,.,1]),arraytomat(subDATA4[l,.,2]),h_b4);
    l = l+1;
endo;

{sub_Test_4} = sub_TN_4 * (1/tau_b4);

// p-value
Ind_accept4 = zeros(1,numblock4);
z=1;
do until z > numblock4; 
    Ind_accept4[z] = Test_all <= sub_Test_4[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block4 = meanc(Ind_accept4');  // answer 


// subDATA for block5
numblock5 = N-block5+1;
subDATA5 = areshape(0,numblock5|block5|2);
j = 1;
do until j > numblock5;
    subDATA5[j,.,.] = France[j:(j+block5-1),.];
    j = j+1;
endo;
       
sub_TN_5 = zeros(numblock5,1);
l = 1;
do until l > numblock5;
    sub_TN_5[l,1] = Test2016_linear(arraytomat(subDATA5[l,.,1]),arraytomat(subDATA5[l,.,2]),h_b5);
    l = l+1;
endo;

{sub_Test_5} = sub_TN_5 * (1/tau_b5);

// p-value
Ind_accept5 = zeros(1,numblock5);
z=1;
do until z > numblock5;  
    Ind_accept5[z] = Test_all <= sub_Test_5[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block5 = meanc(Ind_accept5');  // answer 


// -------------------------------------------------------------------------

// 3.] Quadratic Hypothesis: Test 2016    
// test 2012: quadratic test       
Test_all = Test2012_quadratic(France[.,1],France[.,2],h_N);
       
// subDATA for block1
numblock1 = N-block1+1;
subDATA1 = areshape(0,numblock1|block1|2);
j = 1;
do until j > numblock1;
    subDATA1[j,.,.] = France[j:(j+block1-1),.];
    j = j+1;
endo;
       
sub_Test_1 = zeros(numblock1,1);
l = 1;
do until l > numblock1;
    sub_Test_1[l,1] = Test2012_quadratic(arraytomat(subDATA1[l,.,1]),arraytomat(subDATA1[l,.,2]),h_b1);
    l = l+1;
endo;

// indicator for upper p-value for block1    
Ind_accept_UP1 = zeros(numblock1,1);
z=1;
do until z > numblock1;  
    Ind_accept_UP1[z] = abs(Test_all) <= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP1 = meanc(Ind_accept_UP1); 
      
// indicator for lower p-value for block1  
Ind_accept_LOW1 = zeros(numblock1,1);
z=1;
do until z > numblock1; 
    Ind_accept_LOW1[z] = -abs(Test_all) >= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW1 = meanc(Ind_accept_LOW1); 
      
pvalue_block1 = pvalue_UP1+pvalue_LOW1; // answer

       
// subDATA for block2
numblock2 = N-block2+1;
subDATA2 = areshape(0,numblock2|block2|2);
j = 1;
do until j > numblock2;
    subDATA2[j,.,.] = France[j:(j+block2-1),.];
    j = j+1;
endo;
       
sub_Test_2 = zeros(numblock2,1);
l = 1;
do until l > numblock2;
    sub_Test_2[l,1] = Test2012_quadratic(arraytomat(subDATA2[l,.,1]),arraytomat(subDATA2[l,.,2]),h_b2);
    l = l+1;
endo;

// indicator for upper p-value for block2    
Ind_accept_UP2 = zeros(numblock2,1);
z=1;
do until z > numblock2;  
    Ind_accept_UP2[z] = abs(Test_all) <= sub_Test_2[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP2 = meanc(Ind_accept_UP2); 
      
// indicator for lower p-value for block2  
Ind_accept_LOW2 = zeros(numblock2,1);
z=1;
do until z > numblock2;  
    Ind_accept_LOW2[z] = -abs(Test_all) >= sub_Test_2[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW2 = meanc(Ind_accept_LOW2); 
      
pvalue_block2 = pvalue_UP2+pvalue_LOW2; // answer

       
// subDATA for block3
numblock3 = N-block3+1;
subDATA3 = areshape(0,numblock3|block3|2);
j = 1;
do until j > numblock3;
    subDATA3[j,.,.] = France[j:(j+block3-1),.];
    j = j+1;
endo;
       
sub_Test_3 = zeros(numblock3,1);
l = 1;
do until l > numblock3;
    sub_Test_3[l,1] = Test2012_quadratic(arraytomat(subDATA3[l,.,1]),arraytomat(subDATA3[l,.,2]),h_b3);
    l = l+1;
endo;

// indicator for upper p-value for block3    
Ind_accept_UP3 = zeros(numblock3,1);
z=1;
do until z > numblock3;  
    Ind_accept_UP3[z] = abs(Test_all) <= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_UP3 = meanc(Ind_accept_UP3); 
      
// indicator for lower p-value for block3  
Ind_accept_LOW3 = zeros(numblock3,1);
z=1;
do until z > numblock3;  
    Ind_accept_LOW3[z] = -abs(Test_all) >= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW3 = meanc(Ind_accept_LOW3); 
      
pvalue_block3 = pvalue_UP3+pvalue_LOW3; // answer

       
// subDATA for block4
numblock4 = N-block4+1;
subDATA4 = areshape(0,numblock4|block4|2);
j = 1;
do until j > numblock4;
    subDATA4[j,.,.] = France[j:(j+block4-1),.];
    j = j+1;
endo;
       
sub_Test_4 = zeros(numblock4,1);
l = 1;
do until l > numblock4;
    sub_Test_4[l,1] = Test2012_quadratic(arraytomat(subDATA4[l,.,1]),arraytomat(subDATA4[l,.,2]),h_b4);
    l = l+1;
endo;

// indicator for upper p-value for block4    
Ind_accept_UP4 = zeros(numblock4,1);
z=1;
do until z > numblock4;  
    Ind_accept_UP4[z] = abs(Test_all) <= sub_Test_4[z];  @ acceptance indicator s@
    z = z+1;
    endo;
      
pvalue_UP4 = meanc(Ind_accept_UP4); 
      
// indicator for lower p-value for block4  
Ind_accept_LOW4 = zeros(numblock4,1);
z=1;
do until z > numblock4;  
    Ind_accept_LOW4[z] = -abs(Test_all) >= sub_Test_4[z];  @ acceptance indicator s@
    z = z+1;
    endo;
      
pvalue_LOW4 = meanc(Ind_accept_LOW4); 
      
pvalue_block4 = pvalue_UP4+pvalue_LOW4; // answer


// subDATA for block5
numblock5 = N-block5+1;
subDATA5 = areshape(0,numblock5|block5|2);
j = 1;
do until j > numblock5;
    subDATA5[j,.,.] = France[j:(j+block5-1),.];
    j = j+1;
endo;
       
sub_Test_5 = zeros(numblock5,1);
l = 1;
do until l > numblock5;
    sub_Test_5[l,1] = Test2012_quadratic(arraytomat(subDATA5[l,.,1]),arraytomat(subDATA5[l,.,2]),h_b5);
    l = l+1;
endo;

// indicator for upper p-value for block5    
Ind_accept_UP5 = zeros(numblock5,1);
z=1;
do until z > numblock5;  
    Ind_accept_UP5[z] = abs(Test_all) <= sub_Test_5[z];  @ acceptance indicator s@
    z = z+1;
    endo;
      
pvalue_UP5 = meanc(Ind_accept_UP5); 
      
// indicator for lower p-value for block5  
Ind_accept_LOW5 = zeros(numblock5,1);
z=1;
do until z > numblock5; 
    Ind_accept_LOW5[z] = -abs(Test_all) >= sub_Test_5[z];  @ acceptance indicator @
    z = z+1;
    endo;
      
pvalue_LOW5 = meanc(Ind_accept_LOW5); 
      
pvalue_block5 = pvalue_UP5+pvalue_LOW5; // answer

       
// -------------------------------------------------------------------------

// 4.] Quadratic Hypothesis: Test 2016    
// test 2016: quadratic test
TN_all = Test2016_quadratic(France[.,1],France[.,2],h_N);
Test_all = (1/tauN) * TN_all; 
       
// subDATA for block1
numblock1 = N-block1+1;
subDATA1 = areshape(0,numblock1|block1|2);
j = 1;
do until j > numblock1;
    subDATA1[j,.,.] = France[j:(j+block1-1),.];
    j = j+1;
endo;
       
sub_TN_1 = zeros(numblock1,1);
l = 1;
do until l > numblock1;
    sub_TN_1[l,1] = Test2016_quadratic(arraytomat(subDATA1[l,.,1]),arraytomat(subDATA1[l,.,2]),h_b1);
    l = l+1;
endo;

{sub_Test_1} = sub_TN_1 * (1/tau_b1);

// p-value
Ind_accept1 = zeros(1,numblock1);
z=1;
do until z > numblock1;  
    Ind_accept1[z] = Test_all <= sub_Test_1[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block1 = meanc(Ind_accept1');  // answer 

       
// subDATA for block2
numblock2 = N-block2+1;
subDATA2 = areshape(0,numblock2|block2|2);
j = 1;
do until j > numblock2;
    subDATA2[j,.,.] = France[j:(j+block2-1),.];
    j = j+1;
endo;
       
sub_TN_2 = zeros(numblock2,1);
l = 1;
do until l > numblock2;
    sub_TN_2[l,1] = Test2016_quadratic(arraytomat(subDATA2[l,.,1]),arraytomat(subDATA2[l,.,2]),h_b2);
    l = l+1;
endo;

{sub_Test_2} = sub_TN_2 * (1/tau_b2);

// p-value
Ind_accept2 = zeros(1,numblock2);
z=1;
do until z > numblock2;  
    Ind_accept2[z] = Test_all <= sub_Test_2[z];  @ acceptance indicator s@
    z = z+1;
endo;
     
pvalue_block2 = meanc(Ind_accept2');  // answer 

       
// subDATA for block3
numblock3 = N-block3+1;
subDATA3 = areshape(0,numblock3|block3|2);
j = 1;
do until j > numblock3;
    subDATA3[j,.,.] = France[j:(j+block3-1),.];
    j = j+1;
endo;
       
sub_TN_3 = zeros(numblock3,1);
l = 1;
do until l > numblock3;
    sub_TN_3[l,1] = Test2016_quadratic(arraytomat(subDATA3[l,.,1]),arraytomat(subDATA3[l,.,2]),h_b3);
    l = l+1;
endo;

{sub_Test_3} = sub_TN_3 * (1/tau_b3);

// p-value
Ind_accept3 = zeros(1,numblock3);
z=1;
do until z > numblock3;  
    Ind_accept3[z] = Test_all <= sub_Test_3[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block3 = meanc(Ind_accept3');  // answer 

       
// subDATA for block4
numblock4 = N-block4+1;
subDATA4 = areshape(0,numblock4|block4|2);
j = 1;
do until j > numblock4;
    subDATA4[j,.,.] = France[j:(j+block4-1),.];
    j = j+1;
endo;
       
sub_TN_4 = zeros(numblock4,1);
l = 1;
do until l > numblock4;
    sub_TN_4[l,1] = Test2016_quadratic(arraytomat(subDATA4[l,.,1]),arraytomat(subDATA4[l,.,2]),h_b4);
    l = l+1;
endo;

{sub_Test_4} = sub_TN_4 * (1/tau_b4);

// p-value
Ind_accept4 = zeros(1,numblock4);
z=1;
do until z > numblock4;  
    Ind_accept4[z] = Test_all <= sub_Test_4[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block4 = meanc(Ind_accept4');  // answer 


// subDATA for block5
numblock5 = N-block5+1;
subDATA5 = areshape(0,numblock5|block5|2);
j = 1;
do until j > numblock5;
    subDATA5[j,.,.] = France[j:(j+block5-1),.];
    j = j+1;
endo;
       
sub_TN_5 = zeros(numblock5,1);
l = 1;
do until l > numblock5;
    sub_TN_5[l,1] = Test2016_quadratic(arraytomat(subDATA5[l,.,1]),arraytomat(subDATA5[l,.,2]),h_b5);
    l = l+1;
endo;

{sub_Test_5} = sub_TN_5 * (1/tau_b5);

// p-value
Ind_accept5 = zeros(1,numblock5);
z=1;
do until z > numblock5;  
    Ind_accept5[z] = Test_all <= sub_Test_5[z];  @ acceptance indicator @
    z = z+1;
endo;
     
pvalue_block5 = meanc(Ind_accept5');  // answer 

