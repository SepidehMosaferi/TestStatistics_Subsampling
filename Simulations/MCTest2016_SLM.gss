// Title: Monte Carlo Density for 2016 Test Statistic with Endogeneity and Semi-Long Memory Regressor
// Author: Sepideh Mosaferi
// Date: March 2023

new;
library pgraph;
pqgwin many;

// test statistic [Analytical form for Integral]
proc ( 1 ) = Test2016(y,x,hpower);
    local n,gam,arg,ker,xmat,theta,gxtheta,z2,T_N;
    n = rows(y); 
    gam = 1/(n^hpower);    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam;
    ker = gam*gauss(arg/2); 
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x; 
    z2 = (y-gxtheta)*(y-gxtheta)';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp;  

fn gauss(r) = 1/(2*sqrt(pi)).*exp(-r^2);


// proc to generate semi-long memory data by looping 
proc dsimtemp(u,d,delta);
/*
** simulate I(d) data
** input  = u
** output = (I-e^(-lambda_N)*L)^-d u; lambda_N=1/N^delta
*/
local nn,y,b0,k,b,ur,temp;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
temp = exp(-1/nn^delta);    
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=temp*d;
   else;   
      b[k]=temp*(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
      
d01 = 0.1; @ value of d @    
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;
   
   delta1 = 1/3;   @ value of tempering @
   delta2 = 1/4;
   delta3 = 1/5;
   delta4 = 1/6;

// sample size selection  
  nn = numh[2]; 

// saving results
Dist_d01 = zeros(iter,1);
Dist_d02 = zeros(iter,1);
Dist_d03 = zeros(iter,1);
Dist_d04 = zeros(iter,1);
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);  @ converts equation error to AR(1) errors @
      
      uxtempd01 = dsimtemp(ux,d01,delta4);  // generate semi-long memory inputs for regressor [case: d01] 
      uxtempd02 = dsimtemp(ux,d02,delta4);  // generate semi-long memory inputs for regressor [case: d02]      
      uxtempd03 = dsimtemp(ux,d03,delta4);  // generate semi-long memory inputs for regressor [case: d03]  
      uxtempd04 = dsimtemp(ux,d04,delta4);  // generate semi-long memory inputs for regressor [case: d04]
      
      // x and y
      xtempd01   = recserar(uxtempd01,uxtempd01[1],1);  // regressor is partial sum of semi-long memory inputs [case: d01]
      fxtempd01 = xtempd01;
      ytempd01 = b*fxtempd01 + sig*uy;                // cointegrated regression equation [case: d01]
      
      xtempd02   = recserar(uxtempd02,uxtempd02[1],1);  // regressor is partial sum of semi-long memory inputs [case: d02]
      fxtempd02 = xtempd02;
      ytempd02 = b*fxtempd02 + sig*uy;                // cointegrated regression equation [case: d02]     

      xtempd03   = recserar(uxtempd03,uxtempd03[1],1);  // regressor is partial sum of semi-long memory inputs [case: d03]
      fxtempd03 = xtempd03;
      ytempd03 = b*fxtempd03 + sig*uy;                // cointegrated regression equation [case: d03]

      xtempd04   = recserar(uxtempd04,uxtempd04[1],1);  // regressor is partial sum of semi-long memory inputs [case: d04]
      fxtempd04 = xtempd04;
      ytempd04 = b*fxtempd04 + sig*uy;                // cointegrated regression equation [case: d04]
          
      // coefficients of test statistic
      h_N = nn^(-hpower);
      
      d_Nd01 = nn^(0.5+d01*delta4);
      d_Nd02 = nn^(0.5+d02*delta4);
      d_Nd03 = nn^(0.5+d03*delta4);
      d_Nd04 = nn^(0.5+d04*delta4);
      
      tauNd01 = nn*h_N/d_Nd01;
      tauNd02 = nn*h_N/d_Nd02;
      tauNd03 = nn*h_N/d_Nd03;
      tauNd04 = nn*h_N/d_Nd04;
 
      // test statistic  
      TN_d01 = Test2016(ytempd01,xtempd01,hpower);
      Test_d01 = (1/tauNd01) * TN_d01; 
      
      TN_d02 = Test2016(ytempd02,xtempd02,hpower);
      Test_d02 = (1/tauNd02) * TN_d02;
      
      TN_d03 = Test2016(ytempd03,xtempd03,hpower);
      Test_d03 = (1/tauNd03) * TN_d03;
      
      TN_d04 = Test2016(ytempd04,xtempd04,hpower);
      Test_d04 = (1/tauNd04) * TN_d04;
      
      // loop results
      Dist_d01[k,.] = Test_d01;
      Dist_d02[k,.] = Test_d02;
      Dist_d03[k,.] = Test_d03;
      Dist_d04[k,.] = Test_d04;
      
      k = k+1;
  endo;
  
  // results
  Dist_d01 = packr(Dist_d01);
  Dist_d02 = packr(Dist_d02);
  Dist_d03 = packr(Dist_d03);
  Dist_d04 = packr(Dist_d04);  

// writing the results
Result = Dist_d01~Dist_d02~Dist_d03~Dist_d04;
  
/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */    
 
