// Title: Monte Carlo Density for SNU Test Statistic with Endogeneity and Long Memory Regressor
// Author: Sepideh Mosaferi
// Date: March 2023

new;
library pgraph;
pqgwin many;

// test statistic
proc ( 1 ) = SNUtest(y,x,hpower);
    local n,gam,arg,ker,xmat,theta,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    gam = 1/n^hpower;    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam; 
    ker = pdfn(arg);  
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x; 
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);        
    retp(Z_N);
endp;  


// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
      
d01 = 0.1;  @ value of d @  
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;

// sample size selection  
nn = numh[2]; 

// saving results
Dist_d01 = zeros(iter,1);
Dist_d02 = zeros(iter,1);
Dist_d03 = zeros(iter,1);
Dist_d04 = zeros(iter,1);
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);  @ converts equation error to AR(1) errors @
      
      uxd01  = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]   
      uxd02  = dsim(ux,d02);  // generate long memory inputs for regressor [case: d02]    
      uxd03  = dsim(ux,d03);  // generate long memory inputs for regressor [case: d03]
      uxd04  = dsim(ux,d04);  // generate long memory inputs for regressor [case: d04] 
      
      // x and y      
      xd01   = recserar(uxd01,uxd01[1],1);  // regressor is partial sum of long memory inputs [case: d01]
      fxd01 = xd01;
      yd01 = b*fxd01 + sig*uy;                // cointegrated regression equation [case: d01]
      
      xd02   = recserar(uxd02,uxd02[1],1);  // regressor is partial sum of long memory inputs [case: d02]
      fxd02 = xd02;
      yd02 = b*fxd02 + sig*uy;                // cointegrated regression equation [case: d02]     
      
      xd03   = recserar(uxd03,uxd03[1],1);  // regressor is partial sum of long memory inputs [case: d03]
      fxd03 = xd03;
      yd03 = b*fxd03 + sig*uy;                // cointegrated regression equation [case: d03]     
 
      xd04   = recserar(uxd04,uxd04[1],1);  // regressor is partial sum of long memory inputs [case: d04]
      fxd04 = xd04;
      yd04 = b*fxd04 + sig*uy;                // cointegrated regression equation [case: d04]
 
      // test statistic      
      Test_d01 = SNUtest(yd01,xd01,hpower);
      Test_d02 = SNUtest(yd02,xd02,hpower);
      Test_d03 = SNUtest(yd03,xd03,hpower);
      Test_d04 = SNUtest(yd04,xd04,hpower);

      // loop results
      Dist_d01[k,.] = Test_d01;
      Dist_d02[k,.] = Test_d02;
      Dist_d03[k,.] = Test_d03;
      Dist_d04[k,.] = Test_d04;
      
      k = k+1;
  endo;
  
  // results
  Dist_d01 = packr(Dist_d01);
  Dist_d02 = packr(Dist_d02);
  Dist_d03 = packr(Dist_d03);
  Dist_d04 = packr(Dist_d04);
  
// writing the results
Result = Dist_d01~Dist_d02~Dist_d03~Dist_d04;  
  
/*
save the results
*/
  
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */    

