// Title: Power for Test Statistic 2016 with Enodgeneity and Long Memory Regressor
// Author: Sepideh Mosaferi
// Date: July 2022 

new;
library pgraph;
pqgwin many;    

// test statistic [Analytical form for Integral]
proc ( 1 ) = Test2016(y,x,hpower);
    local n,gam,arg,ker,theta1,theta0,gxtheta,z2,T_N;
    n = rows(y); 
    gam = 1/(n^hpower);    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam;
    ker = gam*gauss(arg/2); 
    theta1 = sumc((x-meanc(x)).*(y-meanc(y)))/sumc((x-meanc(x))^2);
    theta0 = meanc(y)- theta1*meanc(x);
    gxtheta = theta0+theta1*x; 
    z2 = (y-gxtheta)*(y-gxtheta)';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp;  

fn gauss(r) = 1/(2*sqrt(pi)).*exp(-r^2); 


// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 0;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;

// sample size selection  
nn = numh[2]; 
  
  alpha = {0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50};  @ alpha=nominal level type I error @
  Critic = 1-alpha;  @ upper tail quantile value @

  Ind_accept1 = zeros(iter,rows(Critic));
  Ind_accept2 = zeros(iter,rows(Critic));
  Ind_accept3 = zeros(iter,rows(Critic));
  Ind_accept4 = zeros(iter,rows(Critic));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);  @ converts equation error to AR(1) errors @
      
      uxd01  = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]
      xd01   = recserar(uxd01,uxd01[1],1);  // regressor is partial sum of long memory inputs [case: d01]
      
      h_N = nn^(-hpower);
      nu = 3;
      fxd01_HA = xd01+(abs(xd01)^nu)*(1/(nn^(0.25+(nu/3))*(h_N^0.25)));          
      yd01_HA = b*fxd01_HA + sig*uy;    // cointegrated regression equation [case: d01]
      
      // writing data
      XYD01_HA = xd01~yd01_HA;
         
      // subsampling process
      block1 = 0.5*(nn^0.5); 
      block2 = (nn^0.5);
      block3 = 2*(nn^0.5);
      block4 = 4*(nn^0.5);
      
      h_N = nn^(-hpower);
      d_N = nn^(0.5+d01);
      tauN = nn*h_N/d_N;
      
      h_b1 = block1^(-hpower);
      h_b2 = block2^(-hpower);
      h_b3 = block3^(-hpower);
      h_b4 = block4^(-hpower);
      
      d_b1 = block1^(0.5+d01);
      d_b2 = block2^(0.5+d01);
      d_b3 = block3^(0.5+d01);
      d_b4 = block4^(0.5+d01);
      
      tau_b1 = block1*h_b1/d_b1;
      tau_b2 = block2*h_b2/d_b2;
      tau_b3 = block3*h_b3/d_b3;
      tau_b4 = block4*h_b4/d_b4;
      
      // test statistic
      TN_all = Test2016(yd01_HA,xd01,hpower);
      Test_all = (1/tauN) * TN_all; 
      
      // subDATA for block1 under HA
      numblock1 = nn-block1+1;
      subDATA1 = areshape(0,numblock1|block1|2);
      j = 1;
      do until j > numblock1;
          subDATA1[j,.,.] = XYD01_HA[j:(j+block1-1),.];
          j = j+1;
      endo;
      
      sub_TN_1 = zeros(numblock1,1);
      l = 1;
      do until l > numblock1;
          sub_TN_1[l,1] = Test2016(arraytomat(subDATA1[l,.,2]),arraytomat(subDATA1[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_1} = sub_TN_1 * (1/tau_b1);
      
      // indicator of being greater for block1
      sub_Test_1sort = sortc(sub_Test_1,1);  @ sorted values based on subsamples @      
      QntileUP1 = quantile(sub_Test_1sort,Critic); @ Upper Q. @
      
      z=1;
      do until z > rows(Critic); 
          Ind_accept1[k,z] = Test_all>=QntileUP1[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
   
      // subDATA for block2 under HA
      numblock2 = nn-block2+1;
      subDATA2 = areshape(0,numblock2|block2|2);
      j = 1;
      do until j > numblock2;
          subDATA2[j,.,.] = XYD01_HA[j:(j+block2-1),.];
          j = j+1;
      endo;
      
      sub_TN_2 = zeros(numblock2,1);
      l = 1;
      do until l > numblock2;
          sub_TN_2[l,1] = Test2016(arraytomat(subDATA2[l,.,2]),arraytomat(subDATA2[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_2} = sub_TN_2 * (1/tau_b2);
      
      // indicator of being greater for block2
      sub_Test_2sort = sortc(sub_Test_2,1);  @ sorted values based on subsamples @      
      QntileUP2 = quantile(sub_Test_2sort,Critic); @ Upper Q. @
      
      z=1;
      do until z > rows(Critic);  
          Ind_accept2[k,z] = Test_all>=QntileUP2[z];  @ acceptance indicator @
          z = z+1;
      endo; 
      
      
      // subDATA for block3 under HA
      numblock3 = nn-block3+1;
      subDATA3 = areshape(0,numblock3|block3|2);
      j = 1;
      do until j > numblock3;
          subDATA3[j,.,.] = XYD01_HA[j:(j+block3-1),.];
          j = j+1;
      endo;
      
      sub_TN_3 = zeros(numblock3,1);
      l = 1;
      do until l > numblock3;
          sub_TN_3[l,1] = Test2016(arraytomat(subDATA3[l,.,2]),arraytomat(subDATA3[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_3} = sub_TN_3 * (1/tau_b3);
      
      // indicator of being greater for block3
      sub_Test_3sort = sortc(sub_Test_3,1);  @ sorted values based on subsamples @      
      QntileUP3 = quantile(sub_Test_3sort,Critic); @ Upper Q. @
      
      z=1;
      do until z > rows(Critic); 
          Ind_accept3[k,z] = Test_all>=QntileUP3[z];  @ acceptance indicator @
          z = z+1;
      endo;
      

      // subDATA for block4 under HA
      numblock4 = nn-block4+1;
      subDATA4 = areshape(0,numblock4|block4|2);
      j = 1;
      do until j > numblock4;
          subDATA4[j,.,.] = XYD01_HA[j:(j+block4-1),.];
          j = j+1;
      endo;
      
      sub_TN_4 = zeros(numblock4,1);
      l = 1;
      do until l > numblock4;
          sub_TN_4[l,1] = Test2016(arraytomat(subDATA4[l,.,2]),arraytomat(subDATA4[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_4} = sub_TN_4 * (1/tau_b4);

      // indicator of being greater for block4
      sub_Test_4sort = sortc(sub_Test_4,1);  @ sorted values based on subsamples @      
      QntileUP4 = quantile(sub_Test_4sort,Critic); @ Upper Q. @
      
      z=1;
      do until z > rows(Critic);  @ length of upper tail critical value @
          Ind_accept4[k,z] = Test_all>=QntileUP4[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      k = k+1;
  endo;
  
  // results
  Ind_accept1 = packr(Ind_accept1);
  Ind_accept2 = packr(Ind_accept2);
  Ind_accept3 = packr(Ind_accept3);
  Ind_accept4 = packr(Ind_accept4); 
  
  // power of test
  Power1 = meanc(Ind_accept1);
  Power2 = meanc(Ind_accept2);
  Power3 = meanc(Ind_accept3);
  Power4 = meanc(Ind_accept4);
  
  // writing the results
  Result = alpha~Critic~Power1~Power2~Power3~Power4;
  
/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */  
