// Title: Power for de-biased 2016 Test Statistic with Endogeneity and Semi-Long Memory Regressor under Nonintegrable Regression Function
// Author: Sepideh Mosaferi
// Date: Feb 2023

new;
library pgraph;
pqgwin many;  

// test statistic [Analytical form for Integral]
proc ( 1 ) = Test2016(y,x,hpower);
    local n,gam,arg,ker,xmat,theta,gxtheta,z2,T_N;
    n = rows(y); 
    gam = 1/(n^hpower);    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam;
    ker = gam*gauss(arg/2); 
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x;    @g_hat@
    z2 = (y-gxtheta)*(y-gxtheta)';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp;   

// outputs are residual hats.
proc ( 1 ) = reshat(y,x);
    local n,xmat,theta,gxtheta,res_hat;
    n = rows(x);
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x;    @g_hat@
    res_hat = y-gxtheta;  @residuals@
    retp(res_hat);
endp;

// test statistic for subsamples
proc ( 1 ) = Test2016_subsamples(res,x,hpower);
    local n,gam,arg,ker,z2,T_N;
    n = rows(x); 
    gam = 1/(n^hpower);    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam;
    ker = gam*gauss(arg/2); 
    z2 = res*res';  
    T_N = sumc(sumc(ker.*z2));
    retp(T_N); 
endp; 

fn gauss(r) = 1/(2*sqrt(pi)).*exp(-r^2); 

// proc to generate semi-long memory data by looping 
proc dsimtemp(u,d,delta);
/*
** simulate I(d) data
** input  = u
** output = (I-e^(-lambda_N)*L)^-d u; lambda_N=1/N^delta
*/
local nn,y,b0,k,b,ur,temp;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
temp = exp(-1/nn^delta);    
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=temp*d;
   else;   
      b[k]=temp*(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
  library gauss, pgraph;
  pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;
   
   delta1 = 1/3;   @ value of tempering @
   delta2 = 1/4;
   delta3 = 1/5;
   delta4 = 1/6;

// sample size selection  
nn = numh[2]; 
  
  alpha = {0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50};  @ alpha=nominal level type I error @
  
  Ind_accept1 = zeros(iter,rows(alpha));
  Ind_accept2 = zeros(iter,rows(alpha));
  Ind_accept3 = zeros(iter,rows(alpha));
  Ind_accept4 = zeros(iter,rows(alpha));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);  @ converts equation error to AR(1) errors @
      
      uxtempd04 = dsimtemp(ux,d04,delta4);  // generate semi-long memory inputs for regressor [case: d04]      
      xtempd04   = recserar(uxtempd04,uxtempd04[1],1);  // regressor is partial sum of semi-long memory inputs [case: d04]
      
      // multiple scenarios for the regression function:
      // 1. y=x+0.5|x|^2*I(|x| <= 10). 
      // Code: fxtempd04_HA = xtempd04+0.5*(abs(xtempd04)^2).*(abs(xtempd04) .<=10)
      // 2. y=x+20*exp(-|x|^2)
      // Code: fxtempd04_HA = xtempd04+20*exp(-abs(xtempd04)^2)
      // 3. y=x+0.1|x|
      // Code: fxtempd04_HA = xtempd04+0.1*abs(xtempd04)
      // 4. y=x+0.1|x|^2
      // Code: fxtempd04_HA = xtempd04+0.1*(abs(xtempd04)^2)
      fxtempd04_HA = xtempd04+0.1*(abs(xtempd04)^2);
      ytempd04_HA = b*fxtempd04_HA + sig*uy;    // cointegrated regression equation [case: d04]

      //writing data
      XYD04temp_HA = xtempd04~ytempd04_HA;
      
      // subsampling process
      block1 = 0.5*(nn^0.5); 
      block2 = (nn^0.5);
      block3 = 2*(nn^0.5);
      block4 = 4*(nn^0.5);
      
      h_N = nn^(-hpower);
      d_N = nn^(0.5+d04*delta4);
      tauN = nn*h_N/d_N;
      
      h_b1 = block1^(-hpower);
      h_b2 = block2^(-hpower);
      h_b3 = block3^(-hpower);
      h_b4 = block4^(-hpower);
      
      d_b1 = block1^(0.5+d04*delta4);
      d_b2 = block2^(0.5+d04*delta4);
      d_b3 = block3^(0.5+d04*delta4);
      d_b4 = block4^(0.5+d04*delta4);
      
      tau_b1 = block1*h_b1/d_b1;
      tau_b2 = block2*h_b2/d_b2;
      tau_b3 = block3*h_b3/d_b3;
      tau_b4 = block4*h_b4/d_b4;
      
      // test statistic
      TN_all = Test2016(ytempd04_HA,xtempd04,hpower);
      Test_all = (1/tauN) * TN_all; 
      
      // subDATA for block1 under HA
      numblock1 = nn-block1+1;
      subDATA1 = areshape(0,numblock1|block1|2);
      j = 1;
      do until j > numblock1;
          subDATA1[j,.,.] = XYD04temp_HA[j:(j+block1-1),.];
          j = j+1;
      endo;
      
      // residuals
      res_subData1 = areshape(0,numblock1|block1|1);
      l = 1;
      do until l > numblock1;
          res_subData1[l,.,.] = reshat(arraytomat(subDATA1[l,.,2]),arraytomat(subDATA1[l,.,1]));
          l = l+1;
      endo;
      
      // adjusting
      subDATA1_new = areshape(0,numblock1|block1|2);
      subDATA1_new[1,.,1] = subDATA1[1,.,1];
      subDATA1_new[1,.,2] = res_subData1[1,.,.];
      j = 2;
      do until j > numblock1;
          subDATA1_new[j,.,1] =subDATA1[j,.,1]-subDATA1[(j-1),1,1]; @regressor@
          subDATA1_new[j,.,2]=res_subData1[j,.,.]; @residual@
          j = j+1;
      endo;
      
      sub_TN_1 = zeros(numblock1,1);
      l = 1;
      do until l > numblock1;
          sub_TN_1[l,1] = Test2016_subsamples(arraytomat(subDATA1_new[l,.,2]),arraytomat(subDATA1_new[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_1} = sub_TN_1 * (1/tau_b1); 
      Mean_Test_1 = meanc(sub_Test_1);
      {sub_Test_1_replace} = sub_Test_1-Mean_Test_1; 
      
      // subDATA for block2 under HA
      numblock2 = nn-block2+1;
      subDATA2 = areshape(0,numblock2|block2|2);
      j = 1;
      do until j > numblock2;
          subDATA2[j,.,.] = XYD04temp_HA[j:(j+block2-1),.];
          j = j+1;
      endo;
      
      // residuals
      res_subData2 = areshape(0,numblock2|block2|1);
      l = 1;
      do until l > numblock2;
          res_subData2[l,.,.] = reshat(arraytomat(subDATA2[l,.,2]),arraytomat(subDATA2[l,.,1]));
          l = l+1;
      endo;
      
      // adjusting
      subDATA2_new = areshape(0,numblock2|block2|2);
      subDATA2_new[1,.,1] = subDATA2[1,.,1];
      subDATA2_new[1,.,2] = res_subData2[1,.,.];
      j = 2;
      do until j > numblock2;
          subDATA2_new[j,.,1] =subDATA2[j,.,1]-subDATA2[(j-1),1,1]; @regressor@
          subDATA2_new[j,.,2]=res_subData2[j,.,.]; @residual@
          j = j+1;
      endo;
      
      sub_TN_2 = zeros(numblock2,1);
      l = 1;
      do until l > numblock2;
          sub_TN_2[l,1] = Test2016_subsamples(arraytomat(subDATA2_new[l,.,2]),arraytomat(subDATA2_new[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_2} = sub_TN_2 * (1/tau_b2);
      Mean_Test_2 = meanc(sub_Test_2);
      {sub_Test_2_replace} = sub_Test_2-Mean_Test_2; 
      
      // subDATA for block3 under HA
      numblock3 = nn-block3+1;
      subDATA3 = areshape(0,numblock3|block3|2);
      j = 1;
      do until j > numblock3;
          subDATA3[j,.,.] = XYD04temp_HA[j:(j+block3-1),.];
          j = j+1;
      endo;
      
      // residuals
      res_subData3 = areshape(0,numblock3|block3|1);
      l = 1;
      do until l > numblock3;
          res_subData3[l,.,.] = reshat(arraytomat(subDATA3[l,.,2]),arraytomat(subDATA3[l,.,1]));
          l = l+1;
      endo;
      
      // adjusting
      subDATA3_new = areshape(0,numblock3|block3|2);
      subDATA3_new[1,.,1] = subDATA3[1,.,1];
      subDATA3_new[1,.,2] = res_subData3[1,.,.];
      j = 2;
      do until j > numblock3;
          subDATA3_new[j,.,1] =subDATA3[j,.,1]-subDATA3[(j-1),1,1]; @regressor@
          subDATA3_new[j,.,2]=res_subData3[j,.,.]; @residual@
          j = j+1;
      endo;
      
      sub_TN_3 = zeros(numblock3,1);
      l = 1;
      do until l > numblock3;
          sub_TN_3[l,1] = Test2016_subsamples(arraytomat(subDATA3_new[l,.,2]),arraytomat(subDATA3_new[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_3} = sub_TN_3 * (1/tau_b3);
      Mean_Test_3 = meanc(sub_Test_3);
      {sub_Test_3_replace} = sub_Test_3-Mean_Test_3; 
      
      // subDATA for block4 under HA
      numblock4 = nn-block4+1;
      subDATA4 = areshape(0,numblock4|block4|2);
      j = 1;
      do until j > numblock4;
          subDATA4[j,.,.] = XYD04temp_HA[j:(j+block4-1),.];
          j = j+1;
      endo;
      
      // residuals
      res_subData4 = areshape(0,numblock4|block4|1);
      l = 1;
      do until l > numblock4;
          res_subData4[l,.,.] = reshat(arraytomat(subDATA4[l,.,2]),arraytomat(subDATA4[l,.,1]));
          l = l+1;
      endo;
      
      // adjusting
      subDATA4_new = areshape(0,numblock4|block4|2);
      subDATA4_new[1,.,1] = subDATA4[1,.,1];
      subDATA4_new[1,.,2] = res_subData4[1,.,.];
      j = 2;
      do until j > numblock4;
          subDATA4_new[j,.,1] =subDATA4[j,.,1]-subDATA4[(j-1),1,1]; @regressor@
          subDATA4_new[j,.,2]=res_subData4[j,.,.]; @residual@
          j = j+1;
      endo;
      
      sub_TN_4 = zeros(numblock4,1);
      l = 1;
      do until l > numblock4;
          sub_TN_4[l,1] = Test2016_subsamples(arraytomat(subDATA4_new[l,.,2]),arraytomat(subDATA4_new[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      {sub_Test_4} = sub_TN_4 * (1/tau_b4);
      Mean_Test_4 = meanc(sub_Test_4);
      {sub_Test_4_replace} = sub_Test_4-Mean_Test_4; 
      
      // Fitting a regression
      Data = zeros(2,2);
      Data[1,1]=ln(Mean_Test_3);
      Data[2,1]=ln(Mean_Test_4);
      Data[1,2]=ln(block3);
      Data[2,2]=ln(block4);
      
      xmat = zeros(2, 2);
      xmat[.,1]=ones(2,1);
      xmat[.,2]=Data[.,2];
      theta=pinv(xmat'*xmat)*xmat'*Data[.,1];
      Mean = theta[1]+theta[2]*ln(nn);
      Mean_N = exp(Mean);
      
      Test_all_replace = Test_all-Mean_N;
      
      // indicator for p-value for block1    
      Ind_accept_1 = zeros(numblock1,1);
      z=1;
      do until z > numblock1;  
          Ind_accept_1[z] = Test_all_replace <= sub_Test_1_replace[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_1 = meanc(Ind_accept_1); 
      
      // indicator of acceptance for block1      
      z=1;
      do until z > rows(alpha);  
          Ind_accept1[k,z] = pvalue_1 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      // indicator for p-value for block2    
      Ind_accept_2 = zeros(numblock2,1);
      z=1;
      do until z > numblock2;  
          Ind_accept_2[z] = Test_all_replace <= sub_Test_2_replace[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_2 = meanc(Ind_accept_2); 
      
      // indicator of acceptance for block2      
      z=1;
      do until z > rows(alpha);  
          Ind_accept2[k,z] = pvalue_2 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      // indicator for p-value for block3    
      Ind_accept_3 = zeros(numblock3,1);
      z=1;
      do until z > numblock3;  
          Ind_accept_3[z] = Test_all_replace <= sub_Test_3_replace[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_3 = meanc(Ind_accept_3); 
      
      // indicator of acceptance for block3      
      z=1;
      do until z > rows(alpha);  
          Ind_accept3[k,z] = pvalue_3 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      // indicator for p-value for block4    
      Ind_accept_4 = zeros(numblock4,1);
      z=1;
      do until z > numblock4;  
          Ind_accept_4[z] = Test_all_replace <= sub_Test_4_replace[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_4 = meanc(Ind_accept_4); 
      
      // indicator of acceptance for block4      
      z=1;
      do until z > rows(alpha);  
          Ind_accept4[k,z] = pvalue_4 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      k = k+1;
  endo;
  
  // results
  Ind_accept1 = packr(Ind_accept1);
  Ind_accept2 = packr(Ind_accept2);
  Ind_accept3 = packr(Ind_accept3);
  Ind_accept4 = packr(Ind_accept4); 
  
  // power of test
  Power1 = meanc(Ind_accept1);
  Power2 = meanc(Ind_accept2);
  Power3 = meanc(Ind_accept3);
  Power4 = meanc(Ind_accept4);
  
  // writing the results
  Result = alpha~Power1~Power2~Power3~Power4;
  
/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */  

