// Title: Power for SNU Test Statistic with Endogeneity and Semi-Long Memory Regressor under Nonintegrable Regression Function
// Author: Sepideh Mosaferi
// Date: Marh 2023

new;
library pgraph;
pqgwin many;

// test statistic
proc ( 1 ) = SNUtest(y,x,hpower);
    local n,gam,arg,ker,xmat,theta,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    gam = 1/n^hpower;    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam; 
    ker = pdfn(arg);  
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x; 
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);        
    retp(Z_N);
endp;      


// proc to generate semi-long memory data by looping 
proc dsimtemp(u,d,delta);
/*
** simulate I(d) data
** input  = u
** output = (I-e^(-lambda_N)*L)^-d u; lambda_N=1/N^delta
*/
local nn,y,b0,k,b,ur,temp;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
temp = exp(-1/nn^delta);    
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=temp*d;
   else;   
      b[k]=temp*(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
  library gauss, pgraph;
  pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;
   
   delta1 = 1/3;   @ value of tempering @
   delta2 = 1/4;
   delta3 = 1/5;
   delta4 = 1/6;

// sample size selection  
nn = numh[2]; 
  
alpha = {0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50};  @ alpha=nominal level type I error @
  
  Ind_accept1 = zeros(iter,rows(alpha));
  Ind_accept2 = zeros(iter,rows(alpha));
  Ind_accept3 = zeros(iter,rows(alpha));
  Ind_accept4 = zeros(iter,rows(alpha));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);
      
      uxtempd04 = dsimtemp(ux,d04,delta4);  // generate semi-long memory inputs for regressor [case: d04]. This could be changed for the other values of d and delta.    
      xtempd04 = recserar(uxtempd04,uxtempd04[1],1); 
      
      // multiple scenarios for the regression function:
      // 1. y=x+0.5|x|^2*I(|x| <= 10). 
      // Code: fxtempd04_HA = xtempd04+0.5*(abs(xtempd04)^2).*(abs(xtempd04) .<=10)
      // 2. y=x+20*exp(-|x|^2)
      // Code: fxtempd04_HA = xtempd04+20*exp(-abs(xtempd04)^2)
      // 3. y=x+0.1|x|
      // Code: fxtempd04_HA = xtempd04+0.1*abs(xtempd04)
      // 4. y=x+0.1|x|^2
      // Code: fxtempd04_HA = xtempd04+0.1*(abs(xtempd04)^2)
      fxtempd04_HA = xtempd04+0.1*(abs(xtempd04)^2);
      ytempd04_HA = b*fxtempd04_HA + sig*uy;   // cointegrated regression equation [case: d04]. This could be changed for the other values of d and delta.
      
      //writing data
      XYD04temp_HA = xtempd04~ytempd04_HA;
      
      // subsampling process
      block1 = 0.5*(nn^0.5); 
      block2 = (nn^0.5);
      block3 = 2*(nn^0.5);
      block4 = 4*(nn^0.5);
      
      h_N = nn^(-hpower);
      h_b1 = block1^(-hpower);
      h_b2 = block2^(-hpower);
      h_b3 = block3^(-hpower);
      h_b4 = block4^(-hpower);
      
      // test statistic
      Test_all = SNUtest(ytempd04_HA,xtempd04,hpower);
      
      // subDATA for block1 under HA
      numblock1 = nn-block1+1;
      subDATA1 = areshape(0,numblock1|block1|2);
      j = 1;
      do until j > numblock1;
          subDATA1[j,.,.] = XYD04temp_HA[j:(j+block1-1),.];
          j = j+1;
      endo;
      
      sub_Test_1 = zeros(numblock1,1);
      l = 1;
      do until l > numblock1;
          sub_Test_1[l,1] = SNUtest(arraytomat(subDATA1[l,.,2]),arraytomat(subDATA1[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block1    
      Ind_accept_1 = zeros(numblock1,1);
      z=1;
      do until z > numblock1;  
          Ind_accept_1[z] = abs(Test_all) <= abs(sub_Test_1[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_1 = meanc(Ind_accept_1); 
      
      // indicator of acceptance for block1      
      z=1;
      do until z > rows(alpha);  
          Ind_accept1[k,z] = pvalue_1 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      
      // subDATA for block2 under HA
      numblock2 = nn-block2+1;
      subDATA2 = areshape(0,numblock2|block2|2);
      j = 1;
      do until j > numblock2;
          subDATA2[j,.,.] = XYD04temp_HA[j:(j+block2-1),.];
          j = j+1;
      endo;
      
      sub_Test_2 = zeros(numblock2,1);
      l = 1;
      do until l > numblock2;
          sub_Test_2[l,1] = SNUtest(arraytomat(subDATA2[l,.,2]),arraytomat(subDATA2[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block2    
      Ind_accept_2 = zeros(numblock2,1);
      z=1;
      do until z > numblock2;  
          Ind_accept_2[z] = abs(Test_all) <= abs(sub_Test_2[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_2 = meanc(Ind_accept_2); 
      
      // indicator of acceptance for block2      
      z=1;
      do until z > rows(alpha);  
          Ind_accept2[k,z] = pvalue_2 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      
      // subDATA for block3 under HA
      numblock3 = nn-block3+1;
      subDATA3 = areshape(0,numblock3|block3|2);
      j = 1;
      do until j > numblock3;
          subDATA3[j,.,.] = XYD04temp_HA[j:(j+block3-1),.];
          j = j+1;
      endo;
      
      sub_Test_3 = zeros(numblock3,1);
      l = 1;
      do until l > numblock3;
          sub_Test_3[l,1] = SNUtest(arraytomat(subDATA3[l,.,2]),arraytomat(subDATA3[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block3    
      Ind_accept_3 = zeros(numblock3,1);
      z=1;
      do until z > numblock3;  
          Ind_accept_3[z] = abs(Test_all) <= abs(sub_Test_3[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_3 = meanc(Ind_accept_3); 
      
      // indicator of acceptance for block3      
      z=1;
      do until z > rows(alpha);  
          Ind_accept3[k,z] = pvalue_3 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      
      // subDATA for block4 under HA
      numblock4 = nn-block4+1;
      subDATA4 = areshape(0,numblock4|block4|2);
      j = 1;
      do until j > numblock4;
          subDATA4[j,.,.] = XYD04temp_HA[j:(j+block4-1),.];
          j = j+1;
      endo;
      
      sub_Test_4 = zeros(numblock4,1);
      l = 1;
      do until l > numblock4;
          sub_Test_4[l,1] = SNUtest(arraytomat(subDATA4[l,.,2]),arraytomat(subDATA4[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block4    
      Ind_accept_4 = zeros(numblock4,1);
      z=1;
      do until z > numblock4;  
          Ind_accept_4[z] = abs(Test_all) <= abs(sub_Test_4[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      pvalue_4 = meanc(Ind_accept_4); 
      
      // indicator of acceptance for block4      
      z=1;
      do until z > rows(alpha);  
          Ind_accept4[k,z] = pvalue_4 <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;
      
      k = k+1;
  endo;
  
  // results
  Ind_accept1 = packr(Ind_accept1);
  Ind_accept2 = packr(Ind_accept2);
  Ind_accept3 = packr(Ind_accept3);
  Ind_accept4 = packr(Ind_accept4); 
  
  // power of test
  Power1 = meanc(Ind_accept1);
  Power2 = meanc(Ind_accept2);
  Power3 = meanc(Ind_accept3);
  Power4 = meanc(Ind_accept4);
  
  // writing the results
  Result = alpha~Power1~Power2~Power3~Power4;
  
/*
Save the results 
*/
 
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */  
    
    
