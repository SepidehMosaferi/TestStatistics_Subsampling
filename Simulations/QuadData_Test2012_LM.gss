// Title: Generating Data from a Quadratic Model and Testing Linear and Quadratic Hypotheses
//        for Test 2012 with Enodgeneity and Long Memory Regressor 
// Author: Sepideh Mosaferi
// Date: July 2022

new;
library pgraph;
pqgwin many;

// test statistic: linear
proc ( 1 ) = Test2012_linear(y,x,hpower);
    local n,gam,arg,ker,theta1,theta0,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    gam = 1/n^hpower;    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam; 
    ker = pdfn(arg);  
    theta1 = sumc((x-meanc(x)).*(y-meanc(y)))/sumc((x-meanc(x))^2);
    theta0 = meanc(y)- theta1*meanc(x);
    gxtheta = theta0+theta1*x; 
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);        
    retp(Z_N);
endp;  


// 1.] Linear Hypothesis

// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;

/* main program */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;

// sample size selection  
nn = numh[2]; 

// saving results
pvalue_linear_block1 = zeros(iter,1);
pvalue_linear_block2 = zeros(iter,1);
pvalue_linear_block3 = zeros(iter,1);
pvalue_linear_block4 = zeros(iter,1);
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);
      
      uxd01 = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]
      xd01 = recserar(uxd01,uxd01[1],1); 
      
      fxd01 = xd01-0.5*xd01^2;
      yd01 = b*fxd01 + sig*uy;    // cointegrated regression equation [case: d01]
      
      // writing data
      XYD01 = xd01~yd01;
          
      // subsampling process
      block1 = 0.5*(nn^0.5); 
      block2 = (nn^0.5);
      block3 = 2*(nn^0.5);
      block4 = 4*(nn^0.5);
      
      h_N = nn^(-hpower);      
      h_b1 = block1^(-hpower);
      h_b2 = block2^(-hpower);
      h_b3 = block3^(-hpower);
      h_b4 = block4^(-hpower);
          
      // test statistic [linear]
      Test_all = Test2012_linear(yd01,xd01,hpower);
      
      // subDATA for block1
      numblock1 = nn-block1+1;
      subDATA1 = areshape(0,numblock1|block1|2);
      j = 1;
      do until j > numblock1;
          subDATA1[j,.,.] = XYD01[j:(j+block1-1),.];
          j = j+1;
      endo;
      
      sub_Test_1 = zeros(numblock1,1);
      l = 1;
      do until l > numblock1;
          sub_Test_1[l,1] = Test2012_linear(arraytomat(subDATA1[l,.,2]),arraytomat(subDATA1[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block1    
      Ind_accept_1 = zeros(numblock1,1);
      z=1;
      do until z > numblock1;  
          Ind_accept_1[z] = abs(Test_all) <= abs(sub_Test_1[z]);  @aacceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_linear_block1[k,.] = meanc(Ind_accept_1); 
      

      // subDATA for block2
      numblock2 = nn-block2+1;
      subDATA2 = areshape(0,numblock2|block2|2);
      j = 1;
      do until j > numblock2;
          subDATA2[j,.,.] = XYD01[j:(j+block2-1),.];
          j = j+1;
      endo;
      
      sub_Test_2 = zeros(numblock2,1);
      l = 1;
      do until l > numblock2;
          sub_Test_2[l,1] = Test2012_linear(arraytomat(subDATA2[l,.,2]),arraytomat(subDATA2[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block2   
      Ind_accept_2 = zeros(numblock2,1);
      z=1;
      do until z > numblock2; 
          Ind_accept_2[z] = abs(Test_all) <= abs(sub_Test_2[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_linear_block2[k,.] = meanc(Ind_accept_UP2); 
      
      
      //subDATA for block3
      numblock3 = nn-block3+1;
      subDATA3 = areshape(0,numblock3|block3|2);
      j = 1;
      do until j > numblock3;
          subDATA3[j,.,.] = XYD01[j:(j+block3-1),.];
          j = j+1;
      endo;
      
      sub_Test_3 = zeros(numblock3,1);
      l = 1;
      do until l > numblock3;
          sub_Test_3[l,1] = Test2012_linear(arraytomat(subDATA3[l,.,2]),arraytomat(subDATA3[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block3   
      Ind_accept_3 = zeros(numblock3,1);
      z=1;
      do until z > numblock3;  
          Ind_accept_3[z] = abs(Test_all) <= abs(sub_Test_3[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_linear_block3[k,.] = meanc(Ind_accept_UP3); 
      

      // subDATA for block4
      numblock4 = nn-block4+1;
      subDATA4 = areshape(0,numblock4|block4|2);
      j = 1;
      do until j > numblock4;
          subDATA4[j,.,.] = XYD01[j:(j+block4-1),.];
          j = j+1;
      endo;
      
      sub_Test_4 = zeros(numblock4,1);
      l = 1;
      do until l > numblock4;
          sub_Test_4[l,1] = Test2012_linear(arraytomat(subDATA4[l,.,2]),arraytomat(subDATA4[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block4   
      Ind_accept_4 = zeros(numblock4,1);
      z=1;
      do until z > numblock4;  
          Ind_accept_4[z] = abs(Test_all) <= abs(sub_Test_4[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_linear_block4[k,.] = meanc(Ind_accept_UP4);    
      
      k = k+1;
  endo;
  
// results
  pvalue_linear_block1 = packr(pvalue_linear_block1);
  pvalue_linear_block2 = packr(pvalue_linear_block2);
  pvalue_linear_block3 = packr(pvalue_linear_block3);
  pvalue_linear_block4 = packr(pvalue_linear_block4);

// writing the results
Result = pvalue_linear_block1~pvalue_linear_block2~pvalue_linear_block3~pvalue_linear_block4;
  
/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */   


//---------------------------------------------------------------------------
// 2.] Quadratic Hypothesis 
  
library pgraph;
pqgwin many;
  
// test statistic: quadratic
proc ( 1 ) = Test2012_quadratic(y,x,hpower);
    local n,gam,arg,ker,Sxx,Sxy,Sxx2,Sx2y,Sx2x2,theta2,theta1,theta0,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);   
    gam = 1/n^hpower;  
    arg = (x*ones(1,n)-ones(n,1)*x')/gam; 
    ker = pdfn(arg); 
    Sxx = sumc(x^2)-(sumc(x))^2/n;
    Sxy = sumc(x.*y)-(sumc(x)*sumc(y))/n;
    Sxx2 = sumc(x^3)-(sumc(x)*(sumc(x^2)))/n;
    Sx2y = sumc((x^2).*y)-(sumc(x^2)*sumc(y))/n;
    Sx2x2 = sumc(x^4)-(sumc(x^2))^2/n;
    theta2 = ((Sx2y*Sxx)-(Sxy*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta1 = ((Sxy*Sx2x2)-(Sx2y*Sxx2))/(Sxx*Sx2x2-(Sxx2^2));
    theta0 = meanc(y)-theta1*meanc(x)-theta2*(sumc(x^2)/n);    
    gxtheta = theta0+theta1*x+theta2*x^2;  
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);    
    retp(Z_N);
endp;   
  

// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;

/* main program */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;

// sample size selection  
nn = numh[2]; 

// saving results
pvalue_quadratic_block1 = zeros(iter,1);
pvalue_quadratic_block2 = zeros(iter,1);
pvalue_quadratic_block3 = zeros(iter,1);
pvalue_quadratic_block4 = zeros(iter,1);
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);
      
      uxd01 = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]
      xd01 = recserar(uxd01,uxd01[1],1); 
      
      fxd01 = xd01-0.5*xd01^2;
      yd01 = b*fxd01 + sig*uy;    // cointegrated regression equation [case: d01]
      
      // writing data
      XYD01 = xd01~yd01;
          
      // subsampling process
      block1 = 0.5*(nn^0.5); 
      block2 = (nn^0.5);
      block3 = 2*(nn^0.5);
      block4 = 4*(nn^0.5);
      
      h_N = nn^(-hpower);      
      h_b1 = block1^(-hpower);
      h_b2 = block2^(-hpower);
      h_b3 = block3^(-hpower);
      h_b4 = block4^(-hpower);
          
      // test statistic [quadratic]
      Test_all = Test2012_quadratic(yd01,xd01,hpower);
      
      // subDATA for block1
      numblock1 = nn-block1+1;
      subDATA1 = areshape(0,numblock1|block1|2);
      j = 1;
      do until j > numblock1;
          subDATA1[j,.,.] = XYD01[j:(j+block1-1),.];
          j = j+1;
      endo;
      
      sub_Test_1 = zeros(numblock1,1);
      l = 1;
      do until l > numblock1;
          sub_Test_1[l,1] = Test2012_quadratic(arraytomat(subDATA1[l,.,2]),arraytomat(subDATA1[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block1    
      Ind_accept_1 = zeros(numblock1,1);
      z=1;
      do until z > numblock1;  
          Ind_accept_1[z] = abs(Test_all) <= abs(sub_Test_1[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_quadratic_block1[k,.] = meanc(Ind_accept_1); 
      

      // subDATA for block2
      numblock2 = nn-block2+1;
      subDATA2 = areshape(0,numblock2|block2|2);
      j = 1;
      do until j > numblock2;
          subDATA2[j,.,.] = XYD01[j:(j+block2-1),.];
          j = j+1;
      endo;
      
      sub_Test_2 = zeros(numblock2,1);
      l = 1;
      do until l > numblock2;
          sub_Test_2[l,1] = Test2012_quadratic(arraytomat(subDATA2[l,.,2]),arraytomat(subDATA2[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block2   
      Ind_accept_2 = zeros(numblock2,1);
      z=1;
      do until z > numblock2;  
          Ind_accept_2[z] = abs(Test_all) <= abs(sub_Test_2[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_quadratic_block2[k,.]  = meanc(Ind_accept_2); 
      
      
      // subDATA for block3
      numblock3 = nn-block3+1;
      subDATA3 = areshape(0,numblock3|block3|2);
      j = 1;
      do until j > numblock3;
          subDATA3[j,.,.] = XYD01[j:(j+block3-1),.];
          j = j+1;
      endo;
      
      sub_Test_3 = zeros(numblock3,1);
      l = 1;
      do until l > numblock3;
          sub_Test_3[l,1] = Test2012_quadratic(arraytomat(subDATA3[l,.,2]),arraytomat(subDATA3[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block3   
      Ind_accept_3 = zeros(numblock3,1);
      z=1;
      do until z > numblock3; 
          Ind_accept_3[z] = abs(Test_all) <= abs(sub_Test_3[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_quadratic_block3[k,.] = meanc(Ind_accept_3); 
      

      // subDATA for block4
      numblock4 = nn-block4+1;
      subDATA4 = areshape(0,numblock4|block4|2);
      j = 1;
      do until j > numblock4;
          subDATA4[j,.,.] = XYD01[j:(j+block4-1),.];
          j = j+1;
      endo;
      
      sub_Test_4 = zeros(numblock4,1);
      l = 1;
      do until l > numblock4;
          sub_Test_4[l,1] = Test2012_quadratic(arraytomat(subDATA4[l,.,2]),arraytomat(subDATA4[l,.,1]),hpower); 
          l = l+1;
      endo;
      
      // indicator for p-value for block4   
      Ind_accept_4 = zeros(numblock4,1);
      z=1;
      do until z > numblock4;  
          Ind_accept_4[z] = abs(Test_all) <= abs(sub_Test_4[z]);  @ acceptance indicator @
          z = z+1;
      endo;
      
      // p-value
      pvalue_quadratic_block4[k,.] = meanc(Ind_accept_4); 
      
      k = k+1;
  endo;
  
// results
  pvalue_quadratic_block1 = packr(pvalue_quadratic_block1);
  pvalue_quadratic_block2 = packr(pvalue_quadratic_block2);
  pvalue_quadratic_block3 = packr(pvalue_quadratic_block3);
  pvalue_quadratic_block4 = packr(pvalue_quadratic_block4);

// writing the results
Result = pvalue_quadratic_block1~pvalue_quadratic_block2~pvalue_quadratic_block3~pvalue_quadratic_block4;
  
/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */   
  
    

