// Title: Size for 2020 Test Statistic with Endogeneity and Long Memory Regressor with MA(1) Structure for the Residuals 
// Note: This code is based on the AR(p) using Utilde_M.
// Author: Sepideh Mosaferi
// Date: March 2023

new;
library pgraph;
pqgwin many;

// test statistic based on Utilde_M with p=2
proc ( 1 ) = Test2020_tilde(y,x);
    local n,xmat,theta,gxtheta,u_hat,matrix_rho,vector_rho,rho_hat,v_hat,t,M,k,a_hat_k,u,Utilde_M;
    n = rows(y);
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x;
    u_hat = (y-gxtheta);
    
    // estimating rho's based on LSE
    matrix_rho = zeros(2,2);
    matrix_rho[1,1]=sumc(u_hat[2:(n-1)]^2);
    matrix_rho[1,2]=sumc(u_hat[2:(n-1)].*u_hat[1:(n-2)]);
    matrix_rho[2,1]=sumc(u_hat[2:(n-1)].*u_hat[1:(n-2)]);
    matrix_rho[2,2]=sumc(u_hat[1:(n-2)]^2);
    vector_rho = zeros(2,1);
    vector_rho[1,1]=sumc(u_hat[3:n].*u_hat[2:(n-1)]);
    vector_rho[2,1]=sumc(u_hat[3:n].*u_hat[1:(n-2)]);
    rho_hat = pinv(matrix_rho)*vector_rho;
    
    v_hat = zeros(n,1);
    v_hat[1] = u_hat[1];
    v_hat[2] = u_hat[2]-rho_hat[1]*u_hat[1];
    t = 3;
    do until t > n;
        v_hat[t] = u_hat[t]-rho_hat[1]*u_hat[t-1]-rho_hat[2]*u_hat[t-2];
        t = t+1;
    endo;
    
    //M={6,12,18}
    M=18;
    a_hat_k = zeros(M,1);
    k=1;
    do until k > M;
        a_hat_k[k] = sumc(v_hat[(k+1):n].*v_hat[1:(n-k)])/sumc(v_hat^2);
        k = k+1;
    endo;
    Utilde_M = zeros(M,1);
    u=1;
    do until u > M;
    Utilde_M[u] = n*(n+2)*(a_hat_k[u]^2/(n-k)); 
        u = u+1;
    endo;
    Utilde_M = sumc(Utilde_M); 
    retp(Utilde_M);
endp;  
    

// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
mu = 0;
theta = 0.8;

// sample size selection  
nn = numh[2]; 
  
alpha = {0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50};  @ alpha=nominal level type I error @

// saving results
Ind_accept = zeros(iter,rows(alpha));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      
      uy_MA = zeros(nn,1);
      uy_MA[1] = mu + uy[1];

      s = 2;
      do until s > nn;
          uy_MA[s]  = mu + uy[s]+theta*uy[s-1];
          s = s+1;
      endo;
      
      uxd01 = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]. This could be changed for the other values of d.
      xd01 = recserar(uxd01,uxd01[1],1); 
      
      fxd01 = xd01;
      yd01 = b*fxd01 + sig*uy_MA;    // cointegrated regression equation [case: d01]. This could be changed for the other values of d.
          
      // test statistic
      Test = Test2020_tilde(yd01,xd01);
      
      // loop result
      // M={6,12,18}
      M=18;
      pvalue = cdfChic(Test, M-1);
      
      // indicator of acceptance    
      z=1;
      do until z > rows(alpha);  
          Ind_accept[k,z] = pvalue <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;

      k = k+1;
  endo;
  
  // results
  Ind_accept = packr(Ind_accept);
  
  // size of test
  Size = meanc(Ind_accept);
  
  // writing the results
  Result = alpha~Size;
  
/*
Save the results
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */    

