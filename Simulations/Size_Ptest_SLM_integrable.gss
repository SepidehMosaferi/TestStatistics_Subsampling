// Title: Size for P Test Statistic with Endogeneity and Semi-Long Memory Regressor 
// Author: Sepideh Mosaferi
// Date: March 2023

new;
library pgraph;
pqgwin many;

// test statistic
proc ( 1 ) = Ptest(y,x);
    local n,theta,j,Ratio,thetanew,dif,theta1,gxtheta,u_hat,num_rho,denom_rho,s,rho_hat,v_hat,t,M,k,a_hat_k,u,Uhat_M;
    n = rows(y);     
    theta = -ln(maxc(abs(y)))/abs(maxc(abs(x))); @ init value @
    // iterative alg:
    j = 1;
    do until j > 500;
        Ratio = sumc((abs(x).*exp(-theta*abs(x))).*(y-exp(-theta*abs(x))))/sumc((abs(x)^2 .*exp(-theta*abs(x))).*(y-2*exp(-theta*abs(x))));
        thetanew = theta+Ratio;
        dif = thetanew-theta;
        theta = thetanew;
        if(abs(dif)<10^(-5)); break;
        else;
            j = j+1;
            endif;
            endo;
    theta1 = theta;
    gxtheta = exp(-theta1*abs(x)); 
    u_hat = (y-gxtheta);
    num_rho = zeros(n-1,1);
    denom_rho = zeros(n-1,1);
    s = 2;
    do until s > (n-1);
        num_rho[s] = u_hat[s]*u_hat[s-1];
        denom_rho[s] = u_hat[s-1]^2;
        s = s+1;
    endo;
    rho_hat = sumc(num_rho)/sumc(denom_rho);
    v_hat = zeros(n,1);
    v_hat[1] = u_hat[1];
    t = 2;
    do until t > n;
        v_hat[t] = u_hat[t]-rho_hat*u_hat[t-1];
        t = t+1;
    endo;
    //M={6,12,18}
    M=18;
    a_hat_k = zeros(M,1);
    k=1;
    do until k > M;
        a_hat_k[k] = sumc(v_hat[(k+1):n].*v_hat[1:(n-k)])/sumc(v_hat^2);
        k = k+1;
    endo;
    Uhat_M = zeros(M,1);
    u=1;
    do until u > M;
    Uhat_M[u] = n*(n+2)*(a_hat_k[u]^2/(n-k)); 
        u = u+1;
    endo;
    Uhat_M = sumc(Uhat_M); 
    retp(Uhat_M);
endp;   
    

// proc to generate SLM data by looping [TFBM case]
proc dsimtemp(u,d,delta);
/*
** simulate I(d) data
** input  = u
** output = (I-e^(-lambda_N)*L)^-d u; lambda_N=1/N^delta
*/
local nn,y,b0,k,b,ur,temp;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
temp = exp(-1/nn^delta);    
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=temp*d;
   else;   
      b[k]=temp*(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {100, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 1;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @

delta1 = 1/3;   @ value of tempering @
delta2 = 1/4;
delta3 = 1/5;
delta4 = 1/6;

// sample size selection  
nn = numh[2]; 
  
alpha = {0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50};  @ alpha=nominal level type I error @

// saving results
Ind_accept = zeros(iter,rows(alpha));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);
      
      uxtempd04 = dsimtemp(ux,d04,delta4);  // generate semi-long memory inputs for regressor [case: d04]. This could be changed for the other values of d and delta.      
      xtempd04 = recserar(uxtempd04,uxtempd04[1],1); 
      
      fxtempd04 = exp(-abs(xtempd04));
      ytempd04 = b*fxtempd04 + sig*uy;   // cointegrated regression equation [case: d04]. This could be changed for the other values of d and delta. 

      // writing data
      XYD04temp = xtempd04~ytempd04;
          
      // test statistic
      Test = Ptest(ytempd04,xtempd04);
      
      // loop result
      // M={6,12,18}
      M=18;
      pvalue = cdfChic(Test, M-1);
      
      // indicator of acceptance    
      z=1;
      do until z > rows(alpha);  
          Ind_accept[k,z] = pvalue <= alpha[z];  @ acceptance indicator @
          z = z+1;
      endo;

      k = k+1;
  endo;
  
  // results
  Ind_accept = packr(Ind_accept);
  
  // size of test
  Size = meanc(Ind_accept);
  
  // writing the results
  Result = alpha~Size;
  
/*
Save the results
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Result.txt" ON; /* this opens the text file to store the results */
Result;
Output off; /* this closes the text file to store the results */    

