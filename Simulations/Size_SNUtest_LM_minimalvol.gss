// Title: Size for SNU Test Statistic with Endogeneity and Long Memory Regressor
// Note: This is an exmple of Minimal Volatility Rule, which has 4 sqrt{N} inside of it.
// Author: Sepideh Mosaferi
// Date: March 2023

new;
library pgraph;
pqgwin many;

// test statistic
proc ( 1 ) = SNUtest(y,x,hpower);
    local n,gam,arg,ker,xmat,theta,gxtheta,u2,u2_m,S_N,u2power,u2_2m,ker2,V_N2,Z_N;
    n = rows(y);      
    gam = 1/n^hpower;    
    arg = (x*ones(1,n)-ones(n,1)*x')/gam; 
    ker = pdfn(arg);  
    xmat = zeros(n, 2);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x; 
    u2 = (y-gxtheta);
    u2_m = ((u2*ones(1,n)).*(ones(n,1)*u2'));
    S_N = sumc(sumc(diagrv(u2_m.*ker,0)));    
    u2power = u2^2;
    u2_2m = ((u2power*ones(1,n)).*(ones(n,1)*u2power'));
    ker2 = ker^2;     
    V_N2 = sumc(sumc(diagrv(u2_2m.*ker2,0)));    
    Z_N = S_N/sqrt(2*V_N2);        
    retp(Z_N);
endp;  


// proc to generate long memory data by looping 
proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
 pqgwin many;
   
   seed1  = 78912342;
   iter   = 50;             @ # iterations @
   numh   = {50, 100, 200, 500, 1000, 5000}; @ sample size selections @
          
d01 = 0.1;   @ value of d @
d02 = 0.2;
d03 = 0.3; 
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 0.5;            @ correlation between ux and uy for endogeneity @ 
b  = 1;                @ regression coefficient @	
sig = 0.2;             @ error standard deviation @
   
   hpower  = 1/3;   @ value of bandwidth @
   hpower2 = 1/4;   
   hpower3 = 1/5;
   hpower4 = 1/6;

// sample size selection  
nn = numh[4]; 
  
alpha = 0.05;  @ alpha=nominal level type I error @
old_block4 = floor(4*(nn^0.5));
all_blocks = seqa(old_block4-20,1,40);
pvalue = zeros(iter,rows(all_blocks));
  
  k = 1;
  do until k > iter;            @ loop for simulation @
      
      ux  = rndns(nn,1,seed1);    // regressor error 
      uy  = rndns(nn,1,seed1);           // equation error
      ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
      uy  = recserar(uy,uy[1],aa);
      
      uxd01 = dsim(ux,d01);  // generate long memory inputs for regressor [case: d01]. This could be changed for the other values of d.
      xd01 = recserar(uxd01,uxd01[1],1); 
      
      fxd01 = xd01;
      yd01 = b*fxd01 + sig*uy;    // cointegrated regression equation [case: d01]. This could be changed for the other values of d.
      
      // writing data
      XYD01 = xd01~yd01;

      // test statistic
      Test_all = SNUtest(yd01,xd01,hpower);
      
      // subDATA for blocks
      i=1;
      do until i>rows(all_blocks);
          // subDATA for block
          numblock = nn-all_blocks[i]+1;
          subDATA = areshape(0,numblock|all_blocks[i]|2);
          j = 1;
          do until j > numblock;
              subDATA[j,.,.] = XYD01[j:(j+all_blocks[i]-1),.];
              j = j+1;
          endo;
          sub_Test = zeros(numblock,1);
          l = 1;
          do until l > numblock;
              sub_Test[l,1] = SNUtest(arraytomat(subDATA[l,.,1]),arraytomat(subDATA[l,.,2]),hpower);
              l = l+1;
          endo;
          
          // indicator for p-value for block  
          Ind_accept = zeros(numblock,1);
          z=1;
          do until z > numblock;  
              Ind_accept[z] = abs(Test_all) <= abs(sub_Test[z]);  @ acceptance indicator @
              z = z+1;
          endo;
          // p-value  
          pvalue[k,i] = meanc(Ind_accept);
          i = i+1;
      endo;
      k = k+1;
  endo;
  
  
/*
Save the results
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/pvalue.txt" ON; /* this opens the text file to store the results */
pvalue;
Output off; /* this closes the text file to store the results */    
  
Output file = "/Users/sepidehmosaferi/Desktop/all_blocks.txt" ON; /* this opens the text file to store the results */
all_blocks;
Output off; /* this closes the text file to store the results */    



